"use client";

import { Dispatch, SetStateAction } from "react";
import { Wallet } from "ethers";
import { isoBase64URL } from "@simplewebauthn/server/helpers";
import {
  startRegistration,
  type WebAuthnCredential,
} from "@simplewebauthn/browser";
import { getRegistrationOptions, verifyRegistration } from "../lib/registry";
import { registerEncryptor } from "../lib/onchain-registration";

interface RegisterPasskeyProps {
  setUserCredential: Dispatch<SetStateAction<WebAuthnCredential | null>>;
}
export default function RegisterPasskey({
  setUserCredential,
}: RegisterPasskeyProps) {
  async function handleClick() {
    console.log("New passkey registration process started");

    const ephemeralWallet = Wallet.createRandom();
    console.log(
      "Ephemeral wallet address (passkey's userID):",
      ephemeralWallet.address
    );

    console.log("Generating registration options...");
    const registrationOptions = await getRegistrationOptions(
      ephemeralWallet.address
    );
    console.log(
      "Registration options generated by server:",
      JSON.stringify(registrationOptions, null, 2)
    );
    console.log(
      "UserID (wallet address) on registration options in ASCII:",
      isoBase64URL.toUTF8String(registrationOptions.user.id)
    );

    console.log("Starting registration (authenticator interaction)...");
    const registrationResponse = await startRegistration({
      optionsJSON: registrationOptions,
    });
    console.log(
      "Registration response from authenticator:",
      JSON.stringify(registrationResponse, null, 2)
    );

    console.log("Verifying registration...");
    const verificationResponse = await verifyRegistration(
      ephemeralWallet.address,
      registrationResponse
    );
    console.log(
      "Verification response from server:",
      JSON.stringify(verificationResponse, null, 2)
    );

    if (!verificationResponse.registrationInfo) {
      console.error(
        "Registration verification failed: no registration info found"
      );
    } else {
      setUserCredential(verificationResponse.registrationInfo.credential);
    }

    registerEncryptor(ephemeralWallet.address);
  }

  return (
    <button
      className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
      onClick={handleClick}
    >
      Registry new Passkey
    </button>
  );
}
